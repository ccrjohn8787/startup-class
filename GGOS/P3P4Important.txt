- 给一个dictionary, 再给一个set of coding string （g5, goo3,goog2, go2le.........). return all string from dictionary that can be matched with the coding string. 要求尽量减少dictionary look up 次数。给了个方法，但一直不满意复杂度
    - [ ] 如何用Trie,   把问题(a)解决,要求写code 建一个Trie包括所有字典词和coding string.不是很明白。。。凭感觉写了个。
    - Idea: Put all dictionary words in Trie and do trie wildcard match
    - TODO: implement trie solution

- 第三轮：给一个二维的棋盘，棋盘上每一格上可能有镜子，方向可能是/或\，从棋盘外射进来一束光线，问射出的方向和射出的格子。
    - [ ] Follow up: 问随机生成棋盘的方法 大概是根据镜子的数量来选择不同的随机生成方式
    - TODO

- - 实现多项式乘法，自定义data class。第二题升级了一点。主要用dictionary
    - http://www.geeksforgeeks.org/multiply-two-polynomials-2/
    - TODO

- - 设计一个fraction number 的class，要求实现equals和String toDecimal()。
toDecimal是leetcode原题，equals的话注意先得到gcd，然后除了之后再比较。还有分子分母是否为0，符号不一样等等都需要考虑。细节挺多的。
    - TODO
    - HighFreq

- - 第四轮：白人大叔。这一轮比之前都难，虽然是面经题，不过之前的面经很简略，没有实现。
给一个二维boolean array， true代表greyed， 要找出所有可能的正方形。比如：
- 0 1 0
0 0 0
1 0 0
一共有8个正方形（边长为1的7个，为2的1个，为3的0个）。注意matrix的边长可能不等。
这道题一开始出来有点蒙，心想完蛋了。面试官也面无表情，坐在那一句话不说， 没有任何提示。好在最后经过思索还是搞出来了。用DP对matrix先预处理，方法有点类似之前地里面经出现的计算matrix中rectangle面积的题，dp[j]代表从(0, 0) 到 （i, j) 里面所有可用的grid的数量。具体方法大家可以自己思索一下。
- dp[i][j] = maximal edge length as in Maximal Square. Result is all sum of dp[i][j]
    - Hard
    - TODO
    - Important

- - Given a preOrder and postOrder of a binary tree, reconstruct a VALID binary tree ( doesn't have to be the same with the original tree)
    - TODO
    - Important

- - if "i18n" represents "internationalization", "a12y" represents "accessiblity" or "automatibility",
write a function : boolean isUnique(String word, Set<String> dictionary),  return if the word's abbreviation is unique in the dictionary, the dictionary is for example an English dictionary
that is : if the input is internationalization return true because there is only one word can be abbreviated as i18n and it is internationalization, but accessibility will return false because more than one word could be abbreviated as a12y.
    - [ ] Follow Up:
    - if two words share the same abbreviation , then differentiate the abbr by adding new chars to the existing abbr, that is accessibility to ac11y, automatibility to au11y, write a function to find the shortest unique abbr for a word in the dictionary.
    - TODO
    - Important

- - 第三轮：这一轮应该算是最简单的，说给一个stream，这个stream有一个value和一个时间，然后给一个time window，在这个time window里，如果有重复的value就不print，如果不重复出现的就要print，对于已经出现过的value，如果超过了这个time window也要输出。这个我是用了一个hashmap去记了每个value的最后一次出现的时间，然后对于每个新来的stream，去判断有没有在map里和有没有超时来输出，这个是最初的解法。
    - [ ] follow up是如果一个单词出现过之后就再也没有出现了会怎么样，然后我说浪费内存一直存在map里，然后他就说你要怎么办，然后就是用了一个heap，去从map不断删除超过一定阈值没有出现的单词。这一轮是唯一一轮比较顺畅的 -
    - TODO
    - Important
    - hashmap + doubly linked list?

P4: 
- - 给了N个城市，和N-1条road，且这些road可保证城市间均两两互通。 比如 SF--SD--LA ， 每个road都有长度，求所有两两之间的path的和，然后除以所有的path数得到平均值。。。（也就是: SF到SD + SF到LA+ SD到LA 再除以3）。  当时有点晕。。写了个brute force = =
- 某一条路径被走的次数其实就是断开这条路径左边城市数*右边城市数吧
这样每删除一条路径，就能在O（1）时间内知道其总共被走了多少次。最后取sum(路径走过的次数 x 路径长度）/ 路径总数即得答案。时间复杂度为O(N)
    - TODO
    - Hard
    - Important
- - 题目：Given an array of Ad (profit, start_time, end_time) and a timespan [0, T], find the max profit of Ads that fit the timespan.
小哥进来就说了句中文：怎么样啊？顿觉好温暖，中文寒暄了几句就用英文开始了。先说了穷举法O(2^n), 然后说了贪心法（不是最优解），最后用DP解决。小哥态度灰常好，给了很有用的提示, 就像自家人啊。
    - TODO
    - Important
    - DP

- 给一个number, 还有一个数组包含这个number所有prime factors, 问这个number的dividers的个数
先求出对于n的每个质数最高能有几次幂，然后把求出来的数做combination。比如24 ＝ 2 ^ 3 * 3 ^ 1, 那最后24有 (3+1) * (1+1) - 2 个divider, 2,3,4,6,8,12 (不包括1和n本身)

- - 写一个class simulate一个病人吃药。一个bottle里有half pills 或者 whole pills, 随机拿一个，如果拿出来的是half pill就吃掉，如果是whole pill 就弄成两个half pill吃一个放回去一个。初始给的pills不一定全是whole的。一开始用了array list，跟面试官的思路有点不同，交流了一下改用两个integer又写了一遍。第二题是假设一开始给的pills是start state，然后给一个end state. 求一个病人随机吃药，从start state吃到end state的概率。比如一开始2 whole, 1 half, 求吃成 1 whole, 1 half的概率。LZ一开始说build一个search tree这样直观点，他表示不需要把tree专门建起来，LZ就直接一边搜一边算没有用extra memory。
    - 从初始状态作为一个root，按一个search tree做dfs/bfs计算，每次有两个child, 把达到parent时候的概率带到child里去计算，遇到目标状态就停止，还要判断终止状态，就是到了一个不可能达到目标状态的情况。最后把所有到达目标状态时候的概率加起来。
    - TODO
    - Hard
    - Important

- - 给一个directed graph 的start node，这个graph里可能有cycle，如果remove一些edge可以使这个graph不含有cycle，并且从start node依然能访问到所有这个graph里的nodes，这些edge就是back edge。要求打印出所有的back edge。写完拍了照又
    - [ ] follow up了一下，问存不存在这种graph，你可以remove 不同的 backedges 使得这个graph valid。LZ一开始觉得是不存在的，但是想不出来证明的方法。后来画了个图发现是存在的，但LZ自己没一下子看出来。。被提醒了下。
    - TODO: Follow up

- - 给你一堆灯泡。可以flip 一个范围开着变关， 关变开， 然后问这么干了k次以后， 随便问你一个灯泡是开着开始关着，怎么做。我还是很弱地没写完。 但是有很多idea。主要想就是interval， merge interval 之类
- 假设询问有q个，灯泡有n个
对于一次flip(l,r)，在l和r+1两点取反，即flag[l] = flag[l] xor 1, flag[r + 1] = flag[r + 1] xor 1，灯泡i 最后的状态就是把j<=i的flag[j]xor起来
如果全部flip完后才询问，可以直接按上述方法做完后算好每个灯的状态直接保存下来，询问直接输出
O(n+k+q)
如果一边flip一边有询问，那么可用Binary Index Tree将flip和query都做成O(logn)，或者直接用Segment Tree或BST等数据结构维护区间修改
O(n+(k+q)logn)
    - TODO
    - Hard
