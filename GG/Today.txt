1. Given a sorted array of integers nums and integer values a, b and c. Apply a function of the form f(x) = ax2 + bx + c to each element x in the array.

The returned array must be in sorted order.

Expected time complexity: O(n)

Example:
nums = [-4, -2, 2, 4], a = 1, b = 3, c = 5,

Result: [3, 9, 15, 33]

nums = [-4, -2, 2, 4], a = -1, b = 3, c = 5

Result: [-23, -5, 1, 7]

2. Strobo number: https://segmentfault.com/a/1190000003787462

5. 题目是给你一个board，里面存储user的信息，user有id和socre。
board有adduser(id, score)(返回add进去的user当前的rank), findByRank(k) (这个返回id)。
Add如果本身已经有id在board中，需要对这个id的score进行update。(BST insert, delete)

7. - 给一个float number P (e.g = 1.4523), 给定另外一个float number x，求x的sqrt是不是和P前k位相同。二分法改进一下。必要的时候用Math.ceiling()。

static float sqrt(float n)
        {
                float low=0,high=n;
               float mid=(low+high)/2;
               while(Math.abs(mid*mid-n)>0.00001) //IMPORTANT! 0.00001 is 10^-k
                {
                        if(mid*mid<n)
                                low=mid;
                        else if(mid*mid>n)
                                high=mid;
                        mid=(low+high)/2;
                }
                return mid;
        }
传统while(start + 1 < end)改成while(start + 10^-(k+1) < end)，这样就能排除start+end中间没有可能解了。

    - Thoughts:

        - k first digits of P and that plus 10^(-k-1) see if those square include x
        - Approach 2: the above solution



11. - 大除法 输入是一个恶心到极点的string，比如1234567891011....（此后省略10000位）作为除数，和一个long作为被除数，返会所得的值.
    - public String divide（String divisor， long dividend）
    - 这题我的想法就是一段一段的取，大于dividend之后来除，得到的数加到stringbuilder里，余数跟后面加到一起，大于dividend之后在继续除，直到结束。不过其中有些细节要小心，不然会出runtime

    
13. 题目：.input 是一个游戏的后台log (可以自己定义结构)：
- （1） update log，每条记录是 (time, player, role)，比如 (2016 March 11 13:10 UTC, 'mark', 'knight')
（2） play log，没条记录是（time，player），比如 (2016 March 12 12:10 UTC, 'mark')
output是每个role出现的次数。

    - update表示某个时刻某个玩家切换了角色，play log表示某个时刻某个玩家登陆了游戏，也就是要用play log的时间找该玩家play 的role，然后统计次数，登陆一次就算一次
    - 再举个例：play log里有4条记录，mark 3条，jack 1条，mark玩过两次wizard一次knight (切换角色反应在update log里)，jack玩过一次wizard，所以wizard一共3次，knight一次
    - 是的，扫一遍play log的记录，用每个记录的时间做binary search，从update log里找到对应role加一次。
    - 统计的次数是基于play log的，也就是每个role登陆了多少次

    - playMap<player, List<time>>
    - roleMap<player, map<role, time>>
    - for each player:
     for each role’s start and end time:
          binary search first occurrence in playMap that’s after start
          binary search last occurrence in playMap that’s before end

14. 实现一个数据结构，要有insert（）， delete（），median（），mode（）方法，怎么写。

    - [x] 2 heaps + TreeMap<Count, Hashset<Numbers>> + HashMap<Number, Count>:

        - Insert: O(logn)

            - update heaps and median
            - HashMap update: if key in map, add count, otherwise, add entry
            - TreeMap update: remove number from current count, add to new count
        - Delete: O(n) -> can use hash heap to make to O(logn)

15. n个文件(共100G)，找出含某个词的文件将它们归档为一类。
  e.g. A: small cat and small dog
        B: small cat
        C: cat and dog
    then given ['small cat', 'dog'], return [[A,B], [A,C]]
  写了个暴力后，问我怎么做更快，然而我并不知道。不知道他想用分布式还是某些算法(自动机？)，胡扯一通
  
 

            - update heap and median with hashheap
            - hash map delete: update count, if not count, remove key
            - TreeMap delete: find count and remove number, add to new number
        - Median: O(1)

            - take median of heaps
        - Mode: O(1)

            - max of tree map
    - Balanced binary search tree:

        - TreeNode has node count of subtree and count of node with the number
        - Insert: O(logn)
        - Delete: O(logn)
        - Median: Worst case O(long): Need to maintain node count of subtree
        - Mode: O(n): This is a disadvantage against the first solution
    - Solution:

        - Eclipse: MedianAndMode (not implemented)
        - TODO: Implement if have time
        - Important is to discuss trade off between different data structures
        - Link Idea: Link
