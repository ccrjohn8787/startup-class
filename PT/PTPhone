Algorithm

- [ ] Addition class:
ONE + ONE = TWO (231 + 231 = 462）
                   constructor(String left, String right, String result)
-boolean eval(Map<Character, Integer> proposedSolution>)返回这个map是不是正确解
    - Link   Link2 (with code)
    
- Number of Islands category

    - [ ] 给一个2D的matrix，里面是数字。0代表这个点是水，其他数字代表陆地，相邻的陆地会形成一个岛屿。求所有岛屿的最大值。

        - [ ] Follow up 1：如果存在值为负数的点会有什么影响？并相应的修改之前的code。

        - [ ] Follow up 2: 之前是用recursive的方法实现的，所以让用iterative的方法重新写一

            - Link

    - [ ] 一个0，1的矩阵，问是不是所有的0都连在一起.

        - Link
        - Frequency: 3
        - Follow up questions:

            - 我用queue写了个bfs，然后跑代码，改了几个小bug（括号没封住神马的）。中间那个online editor各种不出结果也不报错，后来发现原来有个小bug，然后我发现了并自己改正了。
           然后小哥问我如果矩阵很大的话你这个solution会有什么问题，我想了一下就说bfs可能占用内存比较多，
                                    极端情况下（比如矩阵都是0），queue会很长因为存了很多neighbors。然后dfs在某些情况下占内存比较少一点。
                                    但是时间复杂度都是O(n**2)。然后我就想他会不会让我再实现一下dfs，结果我就说dfs用recursive或者用stack来实现就好了，
                                     他就说okok然后就没让我写！

            - Link

    - [ ] number of islands. LC原题

        - Link

    - [ ] 1 island. island with biggest value, matrix中每个点都有数值，非0的就是岛，临近的岛数值加起来最大的

        - [ ] LZ solution:

            - dfs with a matrix mark visited node
            - optimize: dfs without visited matrix
            - optimize: DP

                - DP是当时临场想的，
注意不能over add了 所以有些 corner case
考虑的地方有：
1. 一边走当前行一边累加上一行，每次更新连续的最后一个非0
2. 从当前行判断是否可连起来两块岛
        - Link

- [ ] 做题上来问shell会不会。。答曰，会，但不熟练。(Write java code)

ok,那我们读csv文件，然后进行操作。行的分隔符是\n，词的分隔符是逗号， 但如果都逗号在双引号里面就不分隔。然后输出你读入的词。
例如某行是
abb, cdd, "abb,cdd", "hello"
那么输出是 "abb", ”cdd", "abb,cdd", "hello"四个词语
上来就懵逼了，呜呜，这个平时不怎么写呀，写的时候也是临时谷歌。。。后来小哥给我改成输入直接是所有的contents了，不是文件。。

    - Link
    - Forward deploy engineer
- Intervals

    - [ ] merge interval，题目比较简单。两个follow up。

        - [ ] 第一个是给一个数字或者interval找到原来的interval list里面是不是包含。

        - [ ] 第二个是返回包含了几次。用binary tree就能做. 最后一个follow up他自己想的，所以出之前他也不知道答案，整个过程像是讨论，而不是给我出题。电面完直接告诉我pass了
        - Link

    - [ ] merge intervals，

        - [ ] follow up 1 设计一个数据结构可以很快返回搜索的数字是否在interval 当中

        - [ ] follow up 2 如果已知interval以及查询的数字都是16bit的该怎么优化
        - Link

    - [ ] 两个interval的list，每个list之内的interval不会overlap，求两个list之间的overlap。比如[[1,3], [5,7]]和[[2,4], [6,9]]结果就是[[2,3], [6,7]]。我用的两个pointer。

        - Link
        - Anqi phone

    - [ ] 求两个List<Interval>的交集，假设每个list中的interval都是disjoint的。

        - Link

    - [ ] Follow up: what if interval has open and close parenthesis (baby phone)
- Clone Graph

    - [ ]  copy graph.struct Thing {    int length;    struct Thing *things[];}; Return a deep copy of thing. The object graph formed by the copy should have the same structure as the object graph of the original,but they should share no references

        - Link
        - 我开始写了个 BFS 实现，后来又让我再写一个 DFS 实现

- [ ] 求两个grid的overlay，二维grid内部用黑白二色涂色，然后黑+黑=黑，白+黑=黑，白+白=白，求两个grid重叠之后的结果
- grid是用四叉树而不是矩阵来表示的，如果某一个区域全部都是同一个颜色，则该节点就变成叶子节点，因此这个树每个分支的深度不一定一样

    - Link
    - Sample code in link

- [ ] 给H高度的tree,有多少种树结构

    - Link

- [ ] 前菜是找Kth smallest element in an array。

    - [ ] 然后是求Kth smallest element in a given range inside an array。比如array是[1, 3, 2, 5, 7, 3, 4], range [0, 3], k = 3, return 3。直接要求把array变成若干block来做。那就每个block排序，然后把最小的放priority queue呗，类似于merge k sorted linked list。结果三弟说他想要的是start with a huge number say 1,000,000,000。然后binary search找。
    - Link
    - Sample code in link

- [ ] 不用写code，只需要说一下算法：leetcode contains duplicate I && II && III

    - Link
- LRU Cache

    - [ ] LRU Cache的原题，地里出现过好几次了，问用什么data structure，然后get, set操作复杂度之类的。楼主用double linked list + hashtable做的，复杂度都是O(1)。然后follow up了下为什么找不到Key的时候用exception而不return null之类的，我说因为如果cache允许value是null，这就会有问题了。然后问了下有哪些重复的代码可以另写一个函数合起来之类的

        - Link

    - [ ] key和value都是int 写完了之后follow up是value变成string，cache从限制key-value pair的个数变成限制总的value string的大小

        - Link

    - [ ] 用泛型

- [ ] You have a sorted binary tree and you want to select the ith smallest element from the tree

    - Link
- Evaluate Expression

    - [ ] Giving a string evluate the result. "1+2+8-5"，assuming only positive integers and "+" "-" operator.

        - [ ] followup: what if there is parentheses.  "1+2+7+(8-(5-6))+9-(7-2)".
        - int evaluate(string expr){
}. 鐣
        - Link

- [ ]

- 後面約半小時時做一個遊戲connect4 (http://en.wikipedia.org/wiki/Connect_Four)
- 玩法就是兩個玩家輪流在每個column放旗子，只要直排橫排或斜線連成四個就贏了
用兩個function實作
makeMove: 玩家用makeMove在每個column擺旗子
checkWin: 判斷哪位玩家贏
    - link
    - Comment:

        - Leetcode Design Tic Tac Toe game solution.
        - Maintain row, column array and diagonal, anti-diagonal integer. player one add 1, player two minus one. If row/column/diagonal/anti-diagonal is n or -n, then player wins
- FixedLengthQueue

    - [ ] 问的是写一个FixedLengthQueue的class

        - [ ] 用固定长度的buffer数组，实现queue的push/pop操作。
        - 解法：设两个pointer，表示队列的head跟tail，push的时候buffer[tail = (tail + 1) % length] = element，pop的时候element = buffer[head = (head + 1) % length]，注意empty还有buffer满的时候，throw exception

        - [ ] 再实现一个int copy(int* dest, int n)函数，从FixedLengthQueue里的buffer copy出最多n个element到dest数组里，返回值是实际copy的element的个数，要求用memcpy做copy操作。
        - 解法：其实就是判断buffer里的data是不是被分成两截，是的话，就call memcpy两次，不是的话，只要call一次，注意下边界情况就行。
        - Link

    - [ ] 实现一个FixedLengthQueue, 有size(), isEmpty(), add(), remove() 等函数。 用circular array 做的。
    - /**.
    - * Queue with length fixed at construction. Manually memory managed to squeeze out best efficiency.
*/
public class FixedLengthQueue<T> {
}. 鐗涗汉浜戦泦,涓€浜╀笁鍒嗗湴

    - [ ] follow up

    -     /**
    * Takes an array and fills it with as many elements as possible (in order) from the queue, then removes them from the queue.
    * Will overwrite anything that already exists in the array. Returns the number of elements retrieved.
    */
    /*
        FYI:
    public static void System.arraycopy(Object src,
    -                  int srcPos,
                 Object dest,
                 int destPos,
                 int length)
    */

        - Link
        - 比如说现在queue里面有6个元素，你要retrieve 4个就能拿到4个，但如果你要retrieve 7个，就只能拿到6个。

- [ ] Valid Sudoku (Leetcode原題)

Others: (Before 2015-06)

- [ ] 怎么在一个链表里面删除节点 (2015-04)

- [ ] maximum subarray (2015-04)

- [ ] 给一个discrete random variable distribution, generate random number 比如 给你 输出0 with probability 0.2, 1 with prob 0.3, 2 with prob3 Follow up : how to speed up 在版上出现过，大家看面经一定要求甚解啊
    - https://instant.1point3acres.com/thread/119520

- [ ] Debug problem: https://instant.1point3acres.com/thread/119478

- [ ] Transform a Map> to a Map> , Map> 的意思是 (A,B)->C, A,B决定一个C. Map> 的意思是 (B,C) ->Set A, B,C决定set A 我觉得做一个tuple array, 然后搞搞就出来了
    - https://instant.1point3acres.com/thread/119472

- [ ] 第一道是reverse list

- [ ] 写一个可以运行的贪吃蛇backend。以前只听同学说过面google设计贪吃蛇，写还是第一次。士气大落，在动手前浪费了不少时间。虽然在提示下写出了大部分但是还是没有写完，如果一拿到就开始动手其实并不难。
    - https://instant.1point3acres.com/thread/113758

- [ ] Given： class IntArray { public: int length(); void swap(int i, int j); // swaps pair of indices } Do: array rotation e.g. and k=2, you get 只能用swap做
    - https://instant.1point3acres.com/thread/113393

    - Leetcode: Reverse words in string. 3 step reverse

- [ ] Contains Duplicate I, II, III Leetcode

- [ ] 需要实现一个routetable，ip的前缀 -> port number，有插入和查找两个操作。其中ip和ip前缀都是二进制，由vector表示。查找返回routetable中和ip最长匹配的前缀所对应的portnumber，如果没有前缀匹配，返回-1。 给定API void insert (vector prefix, int port); void find (vector ip);
    - https://instant.1point3acres.com/thread/111829

    - 就是用二叉树来表示，左子表示0，右子表示1

- [ ] 有个tree，tree里面node的结构包含一个char和左右指针。同一个node的左右指针可以指向同一个child节点，不同node也可以指向相同child节点。保证这个tree里面没有环。 例如： A A A / \ () / \ B C, B , C B \ / D 都是可以的。 让implement一个函数，输入Node* root和int k，返回这个tree在中序遍历下的第k个节点的存的char。考察点在于由于中序遍历时会有重复节点，如何才能节省时间找到第k个。
    - https://instant.1point3acres.com/thread/106557
